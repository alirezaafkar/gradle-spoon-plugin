plugins {
  id 'com.jfrog.artifactory' version '4.18.3'
  id 'com.jfrog.bintray' version '1.8.5'
  id 'com.github.ben-manes.versions' version '0.36.0'
  id 'com.gradle.plugin-publish' version '0.12.0'
  id 'org.jetbrains.kotlin.jvm' version '1.4.10'
  id 'org.jetbrains.dokka' version '0.10.0'
  id 'org.jlleitschuh.gradle.ktlint' version '9.4.1'
  id 'java-gradle-plugin'
  id 'groovy'
  id 'maven-publish'
}

repositories {
  gradlePluginPortal()
  google()
  maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } // For Spoon snapshot, until 2.0.0 is released
}

apply from: 'gradle/dependencies.gradle'

group = GROUP
version = VERSION_NAME
description = POM_DESCRIPTION

sourceCompatibility = versions.java
targetCompatibility = versions.java

jar {
  manifest {
    attributes(
      'Implementation-Title': POM_NAME,
      'Implementation-Version': archiveVersion,
      'Built-By': System.getProperty('user.name'),
      'Built-Date': new Date(),
      'Built-JDK': System.getProperty('java.version'),
      'Built-Gradle': gradle.gradleVersion)
  }
}

task createClasspathManifest() {
  def outputDir = file("$buildDir/$name")

  inputs.files sourceSets.main.runtimeClasspath
  outputs.dir outputDir

  doLast {
    outputDir.mkdirs()
    // Combine both main and test plugin classpaths
//    file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join('\n') + '\n' + sourceSets.test.runtimeClasspath.join('\n')
    file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join('\n')

  }
}

configurations.all {
  resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'

  resolutionStrategy {
    eachDependency { details ->
      if (details.requested.group == 'org.jetbrains.kotlin') {
        details.useVersion versions.kotlin
      }
    }
  }
}

dependencies {
  implementation deps.kotlin.stdlib.jdk
  implementation deps.spoon.runner
  implementation deps.android.tools.build.gradle
  implementation deps.android.tools.ddmlib

  testRuntimeOnly files(createClasspathManifest)

  testImplementation localGroovy()
  testImplementation deps.spock, { exclude module: 'groovy-all' } // Use localGroovy()
}

apply from: 'gradle/compile.gradle'
apply from: 'gradle/publish.gradle'

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
  kotlinOptions {
    jvmTarget = rootProject.versions.java
  }
}
